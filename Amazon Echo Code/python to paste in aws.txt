#used tutorial: https://developer.amazon.com/alexa-skills-kit/alexa-skill-quick-start-tutorial
from __future__ import print_function

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }

    
def build_response(session_attributes, speechlet_response):
    return {
        'version':'1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }
    
def get_welcome_response():
    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Hello, please tell me what your dietary restrictions are by saying I am, followed by your restriction."
    reprompt_text = "Please tell me your dietary restrictions."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text,should_end_session))
        
def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Thank you for eating!"
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))
        
def create_restriction_attributes(restriction):
    return {"restrictions": restriction}
    
def create_food_attributes(food):
    return {"foods": food}
    
def set_restriction(intent, session):
    card_title = intent['name']
    session_attributes = {}
    should_end_session = False
    
    if 'restrictions' in intent['slots']:
        restriction = intent['slots']['restrictions']['value']
        session_attributes = create_restriction_attributes(restriction)
        speech_output = "Thanks for telling me that your restriction is" + \
                        restriction + "What would you like to eat?"
        reprompt_text = "Thanks!"
    else:
        speech_output = "I don't know what your restriction is, sorry."
        reprompt_text = "I don't know your restriction. Please tell me it."
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
def set_food(intent, session):
    card_title = intent['name']
    session_attributes = {}
    should_end_session = False
    
    if 'foods' in intent['slots']:
        food = intent['slots']['foods']['value']
        session_attributes = create_food_attributes(food)
        speech_output = "Because of your " + restriction + "restriction, you cannot eat that."
        reprompt_text = "You cannot eat that."
    else:
        speech_output = "I don't know what food you want, sorry."
        reprompt_text = "I don't know what food you'd like, please tell me."
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
        
def on_session_started(session_started_request, session):
    print("on_session_started requestId=" + session_started_request['requestId']
          + ", sessionId=" + session['sessionId'])
          
def on_launch(launch_request, session):
    print("on_launch_requestId=" + launch_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    return get_welcome_response()
    
def on_intent(intent_request, session):
    print("on_intent requestId=" + intent_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    
    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']
    
    if intent_name == "allergy":
        return set_restriction(intent, session)
    elif intent_name == "CanIEatThat":
        return set_food(intent, session)
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")
        
def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    return handle_session_end_request()


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("event.session.application.applicationId=" +
          event['session']['application']['applicationId'])


    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])